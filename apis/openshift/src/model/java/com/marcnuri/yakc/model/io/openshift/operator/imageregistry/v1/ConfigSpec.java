/*
 * Copyright 2020 Marc Nuri
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.marcnuri.yakc.model.io.openshift.operator.imageregistry.v1;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.marcnuri.yakc.model.Model;
import com.marcnuri.yakc.model.com.coreos.monitoring.v1.AlertmanagerSpecTolerations;
import java.util.List;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Singular;
import lombok.ToString;

/**
 * ImageRegistrySpec defines the specs for the running registry.
 */
@SuppressWarnings({"squid:S1192", "WeakerAccess", "unused"})
@Builder(toBuilder = true)
@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
public class ConfigSpec implements Model {


  /**
   * defaultRoute indicates whether an external facing route for the registry should be created using the default generated hostname.
   */
  @JsonProperty("defaultRoute")
  private Boolean defaultRoute;

  /**
   * disableRedirect controls whether to route all data through the Registry, rather than redirecting to the backend.
   */
  @JsonProperty("disableRedirect")
  private Boolean disableRedirect;

  /**
   * httpSecret is the value needed by the registry to secure uploads, generated by default.
   */
  @JsonProperty("httpSecret")
  private String httpSecret;

  /**
   * logging determines the level of logging enabled in the registry.
   */
  @NonNull
  @JsonProperty("logging")
  private Number logging;

  /**
   * managementState indicates whether the registry instance represented by this config instance is under operator management or not.  Valid values are Managed, Unmanaged, and Removed.
   */
  @NonNull
  @JsonProperty("managementState")
  private String managementState;

  /**
   * nodeSelector defines the node selection constraints for the registry pod.
   */
  @JsonProperty("nodeSelector")
  @Singular(value = "putInNodeSelector", ignoreNullCollections = true)
  private Map<String, String> nodeSelector;

  @JsonProperty("proxy")
  private ConfigSpecProxy proxy;

  /**
   * readOnly indicates whether the registry instance should reject attempts to push new images or delete existing ones.
   */
  @JsonProperty("readOnly")
  private Boolean readOnly;

  /**
   * replicas determines the number of registry instances to run.
   */
  @NonNull
  @JsonProperty("replicas")
  private Number replicas;

  @JsonProperty("requests")
  private ConfigSpecRequests requests;

  @JsonProperty("resources")
  private ConfigSpecResources resources;

  /**
   * rolloutStrategy defines rollout strategy for the image registry deployment.
   */
  @JsonProperty("rolloutStrategy")
  private String rolloutStrategy;

  /**
   * routes defines additional external facing routes which should be created for the registry.
   */
  @JsonProperty("routes")
  @Singular(value = "addToRoutes", ignoreNullCollections = true)
  private List<ConfigSpecRoutes> routes;

  @JsonProperty("storage")
  private ConfigSpecStorage storage;

  /**
   * tolerations defines the tolerations for the registry pod.
   */
  @JsonProperty("tolerations")
  @Singular(value = "addToTolerations", ignoreNullCollections = true)
  private List<AlertmanagerSpecTolerations> tolerations;

}

